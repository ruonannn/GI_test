name: RayTracer CI/CD Pipeline

on:
  push:
    branches: [ main, master, dev, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # allow manual trigger

env:
  DOTNET_VERSION: '9.0.x'
  OUTPUT_DIR: 'rendered_output'

jobs:
  # build and test
  build-and-test:
    name: build and test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: restore dependencies
        run: dotnet restore

      - name: build project
        run: |
          dotnet build --configuration Release --no-restore
          echo " project build successfully"

      - name: verify basic functionality
        run: |
          # test command line argument parsing
          dotnet run -- --help
          echo "command line argument parsing successfully"

  # core rendering tests
  core-rendering-tests:
    name: core rendering tests
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: create output directory
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: Stage 1 - basic geometry rendering
        run: |
          echo "test basic geometry rendering..."
          dotnet run -- -f tests/sample_scene_1.txt -o ${{ env.OUTPUT_DIR }}/stage1_scene1.png
          if [ -f "${{ env.OUTPUT_DIR }}/stage1_scene1.png" ]; then
            echo "Stage 1 - scene 1 rendering successfully"
          else
            echo "Stage 1 - scene 1 rendering failed"
            exit 1
          fi

      - name: Stage 2 - advanced material and lighting
        run: |
          echo "test advanced material and lighting..."
          dotnet run -- -f tests/sample_scene_2.txt -o ${{ env.OUTPUT_DIR }}/stage2_scene2.png
          if [ -f "${{ env.OUTPUT_DIR }}/stage2_scene2.png" ]; then
            echo "Stage 2 - scene 2 rendering successfully"
          else
            echo "Stage 2 - scene 2 rendering failed"
            exit 1
          fi

      - name: upload core rendering results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: core-rendering-results
          path: ${{ env.OUTPUT_DIR }}/stage*.png
          retention-days: 30

  # advanced features tests
  advanced-features-tests:
    name: advanced features tests
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 30
    continue-on-error: true  # advanced features may not be implemented, do not block main process

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: create output directory
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: Stage 3 - OBJ model loading test
        run: |
          echo "test OBJ model loading..."
          if dotnet run -- -f tests/sample_scene_obj.txt -o ${{ env.OUTPUT_DIR }}/obj_model.png; then
            echo "OBJ model rendering successfully"
          else
            echo "OBJ model rendering failed (may not be implemented)"
          fi

      - name: Stage 3 - texture mapping test
        run: |
          echo "test texture mapping..."
          for i in 1 2 3; do
            if [ -f "tests/sample_scene_tex_${i}.txt" ]; then
              if dotnet run -- -f tests/sample_scene_tex_${i}.txt -o ${{ env.OUTPUT_DIR }}/texture_${i}.png; then
                echo "texture scene ${i} rendering successfully"
              else
                echo "texture scene ${i} rendering failed (may not be implemented)"
              fi
            fi
          done

      - name: upload advanced features test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: advanced-features-results
          path: ${{ env.OUTPUT_DIR }}/*.png
          retention-days: 30

  # animation tests
  animation-tests:
    name: animation tests
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 25
    continue-on-error: true

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: create output directory
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: simple animation test
        run: |
          echo "test simple animation..."
          if dotnet run -- -f tests/sample_scene_anim_simple.txt -o ${{ env.OUTPUT_DIR }}/anim_simple.png; then
            echo "simple animation rendering successfully"
          else
            echo "simple animation rendering failed (may not be implemented)"
          fi

      - name: camera animation test
        run: |
          echo "test camera animation..."
          if dotnet run -- -f tests/sample_scene_anim_cam.txt -o ${{ env.OUTPUT_DIR }}/anim_camera.png; then
            echo "camera animation rendering successfully"
          else
            echo "camera animation rendering failed (may not be implemented)"
          fi

      - name: keyframe animation test
        run: |
          echo "test keyframe animation..."
          
          # jump animation
          if [ -f "tests/sample_scene_anim_keyframe_hop.txt" ]; then
            if dotnet run -- -f tests/sample_scene_anim_keyframe_hop.txt -o ${{ env.OUTPUT_DIR }}/keyframe_hop.png -m 10; then
              echo "jump keyframe animation rendering successfully"
            else
              echo "jump keyframe animation rendering failed (may not be implemented)"
            fi
          fi
          
          # spin animation  
          if [ -f "tests/sample_scene_anim_keyframe_spin.txt" ]; then
            if dotnet run -- -f tests/sample_scene_anim_keyframe_spin.txt -o ${{ env.OUTPUT_DIR }}/keyframe_spin.png -m 8; then
              echo "spin keyframe animation rendering successfully"
            else
              echo "spin keyframe animation rendering failed (may not be implemented)"
            fi
          fi

      - name: upload animation test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: animation-test-results
          path: ${{ env.OUTPUT_DIR }}/*.png
          retention-days: 30

  # final scene test
  final-scene-test:
    name: final scene test
    runs-on: ubuntu-latest
    needs: [core-rendering-tests]
    timeout-minutes: 15

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup .NET environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: create output directory
        run: mkdir -p ${{ env.OUTPUT_DIR }}

      - name: final scene rendering test
        run: |
          echo "test final scene..."
          if [ -s "tests/final_scene.txt" ]; then
            if dotnet run -- -f tests/final_scene.txt -o ${{ env.OUTPUT_DIR }}/final_scene.png; then
              echo "final scene rendering successfully"
            else
              echo "final scene rendering failed"
              exit 1
            fi
          else
            echo "final scene file is empty or not exist"
          fi

      - name: upload final scene result
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-scene-result
          path: ${{ env.OUTPUT_DIR }}/final_scene.png
          retention-days: 90

  # test summary
  test-summary:
    name: test result summary
    runs-on: ubuntu-latest
    needs: [core-rendering-tests, advanced-features-tests, animation-tests, final-scene-test]
    if: always()

    steps:
      - name: generate test report
        run: |
          echo "## RayTracer test result summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # core rendering tests result
          if [ "${{ needs.core-rendering-tests.result }}" == "success" ]; then
            echo "**core rendering function**: pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "**core rendering function**: fail" >> $GITHUB_STEP_SUMMARY
          fi
          
          # advanced features tests result
          if [ "${{ needs.advanced-features-tests.result }}" == "success" ]; then
            echo "**advanced features**: pass" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.advanced-features-tests.result }}" == "skipped" ]; then
            echo "**advanced features**: skip" >> $GITHUB_STEP_SUMMARY
          else
            echo "**advanced features**: partially implemented or failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # animation tests result
          if [ "${{ needs.animation-tests.result }}" == "success" ]; then
            echo "**animation function**: pass" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.animation-tests.result }}" == "skipped" ]; then
            echo "**animation function**: skip" >> $GITHUB_STEP_SUMMARY
          else
            echo "**animation function**: partially implemented or failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # final scene test result
          if [ "${{ needs.final-scene-test.result }}" == "success" ]; then
            echo "**final scene**: pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "**final scene**: need to be improved" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo " rendering results have been uploaded to Artifacts, can be downloaded from Actions page." >> $GITHUB_STEP_SUMMARY
